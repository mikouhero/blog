<?php
/**
 * Created by PhpStorm.
 * User: Mikou.hu
 * Date: 2018/9/11
 */

namespace app\admin\controller;

use gmars\rbac\Rbac;
use think\Controller;
use think\Db;
use think\Request;

class Role extends Controller
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $css = config('style_path.admin_css_path');
        $js = config('style_path.admin_js_path');
        $img = config('style_path.admin_img_path');
        $picture = config('style_path.admin_picture_path');
        $this->assign(array(
            'css' => $css,
            'js' => $js,
            'img' => $img,
            'picture' => $picture
        ));
    }

    public function index()
    {
        return view('admin@role/index');
    }

    public function getRoleList(Request $request)
    {
        $data = $request->post();
        $current_page = $data['current_page'];
        $pagesize = 10;
        $start = ($current_page - 1) * $pagesize;
        $list = Db::name('role')->field('id,name,description,status')->limit($start, $pagesize)->select();
        $count = Db::name('role')->count();
        $this->ajaxReturnMsg(200, 'success', array('list' => $list, 'count' => ceil($count / $pagesize)));
    }

    public function addRole(Request $request)
    {
        $input = $request->post();
        $data = json_decode($input['msg'], true);

        if (!isset($data['name']) || empty($data['name']) || !isset($data['description']) || empty($data['description']) ||  !isset($data['status'])) {
            $this->ajaxReturnMsg(201, '参数错误', '');
        }
        // 判断用户是否存在
        if (Db::name('role')->where('name', $data['name'])->count()) {
            $this->ajaxReturnMsg(202, '角色已存在', '');
        }
        $param = $data;
        $param['create_time'] = date("Y-m-d H:i:s");

        $rbac = new Rbac();
        $flag = $rbac->createRole($param);
        if(!$flag){
            $this->ajaxReturnMsg(201, '网络错误', '');
        }

        $this->ajaxReturnMsg(200, 'success',$flag);

    }

    public function editRole(Request $request)
    {

        $input = $request->post();
        $data = json_decode($input['msg'], true);

        if (!isset($data['name']) || empty($data['name']) || !isset($data['description']) || empty($data['description']) ||  !isset($data['status'])) {
            $this->ajaxReturnMsg(201, '参数错误', '');
        }

        // 判断用户是否存在
        if (Db::name('role')->where('id', '<>', $data['id'])->where('name', $data['name'])->count()) {
            $this->ajaxReturnMsg(202, '用户名已存在', '');
        }

        $param = $data;
        Db::name('role')->where('id', $data['id'])->update($param);
        $this->ajaxReturnMsg(200, 'success', '');

    }

    public function delRole(Request $request)
    {
        $data = $request->post();
        if (!isset($data['id']) || empty($data['id'])) {
            $this->ajaxReturnMsg(201, '缺少参数', '');
        }
        $falg = Db::name('role')->where('id', $data['id'])->count();
        if (!$falg) {
            $this->ajaxReturnMsg(201, '网络错误', '');
        }
        $rbac = new Rbac();
        $flag = $rbac->delRole($data['id']);
        if (!$flag) $this->ajaxReturnMsg(202, '网络错误', '');
        $this->ajaxReturnMsg(200, 'success', '');
    }

    private function ajaxReturnMsg($code = 200, $msg, $data, $api_id = 0)
    {
        //        $this->api->end($api_id,$code,$msg,$data);
        header('Access-Control-Allow-Origin: *');//跨域
        header('Content-type: application/json');
        echo json_encode(array('code' => $code, 'msg' => $msg, 'data' => $data));
        die;
    }
}